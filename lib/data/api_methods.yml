getProjects:
  type: null
  required: []
  not_required: []
  return_type: Array
  desc: '参加プロジェクトを配列で返します。指定できるパラメータはありません。'
getProject:
  type: scalar
  required: [projectKey]
  desc: 'プロジェクトキーを指定して、プロジェクトを取得します。'
getProject:
  type: scalar
  required: [projectId]
  desc: 'プロジェクトキーを指定して、プロジェクトを取得します。'
  # desc: 'プロジェクトIDを指定して、プロジェクトを取得します。'
getComponents:
  type: scalar
  required: [projectId]
  desc: 'プロジェクトのカテゴリを返します。'
getVersions:
  type: scalar
  required: [projectId]
  desc: 'プロジェクトの発生バージョン/マイルストーンを返します。'
getUsers:
  type: scalar
  required: [projectId]
  desc: 'プロジェクトの参加メンバーを返します。'
getIssueTypes:
  type: scalar
  required: [projectId]
  desc: 'プロジェクトの種別を返します。'
getIssue:
  type: scalar
  required: [issueKey]
  desc: '課題キーを指定して、課題を取得します。'
getIssue:
  type: scalar
  required: [issueId]
  desc: '課題IDを指定して、課題を取得します。'
getComments:
  type: scalar
  required: [issueId]
  desc: '課題のコメントを返します。'
countIssue:
  type: struct
  required: [projectId]
  desc: '指定した条件に該当する課題件数を返します。'
findIssue:
  type: struct
  required: [projectId]
  desc: '指定した条件に該当する課題を返します。'
createIssue:
  type: struct
  required: [projectId, summary]
  desc: '課題を追加します。'
updateIssue:
  type: struct
  required: [key]
  desc: '課題を更新します。'
switchStatus:
  type: struct
  required: [key, statusId]
  desc: '課題の状態を変更します。'
addComment:
  type: struct
  required: [key, content]
  desc: '課題にコメントを追加します。'
addIssueType:
  type: struct
  required: [project_id, name, color]
  desc: 'プロジェクトの課題種別を追加します。'
updateIssueType:
  type: struct
  required: [id, name, color]
  desc: 'プロジェクトの課題種別を更新します。'
deleteIssueType:
  type: struct
  required: [id, substitute_id]
  desc: 'プロジェクトの課題種別を削除します。'
addVersion:
  type: struct
  required: [project_id, name]
  desc: 'プロジェクトの発生バージョン/マイルストーンを追加します。'
updateVersion:
  type: struct
  required: [id, name]
  desc: 'プロジェクトの発生バージョン/マイルストーンを更新します。'
deleteVersion:
  type: struct
  required: [id]
  desc: 'ロジェクトの発生バージョン/マイルストーンを削除します。'
addComponent:
  type: struct
  required: [project_id, name]
  desc: 'プロジェクトのカテゴリを追加します。追加に成功した場合は、'
updateComponent:
  type: struct
  required: [id, name]
  desc: 'プロジェクトのカテゴリを更新します。'
deleteComponent:
  type: struct
  required: [id]
  desc: 'プロジェクトのカテゴリを削除します。'
getTimeline:
  type: struct
  required: []
  desc: '参加プロジェクトすべての課題の更新情報を配列で返します(最大50件)。'
getProjectSummary:
  type: scalar
  required: [projectId]
  desc: 'プロジェクト状況を取得します。'
getProjectSummaries:
  type: null
  required: []
  desc: '全ての参加プロジェクト状況を取得します。'
getUser:
  type: scalar
  required: [id]
  desc: 'ユーザID(数値またはログインID)を指定して、ユーザを取得します。'
getUserIcon:
  type: scalar
  required: [id]
  desc: 'ユーザID(数値またはログインID)を指定して、ユーザのアイコン画像を取得します。'
getActivityTypes:
  type: null
  required: []
  desc: '課題の更新情報の種別一覧を取得します。'
getStatuses:
  type: null
  required: []
  desc: '課題の状態一覧を取得します。'
getResolutions:
  type: null
  required: []
  desc: '課題の完了理由一覧を取得します。'
getPriorities:
  type: null
  required: []
  desc: '課題の優先度一覧を取得します。'
getCustomFields:
  type: struct
  required: [projectId]
  desc: 'プロジェクトに登録してあるカスタム属性の情報を取得します。'
getChildIssues:
  type: struct
  required: [parent_issue_id]
  desc: '指定した親課題のIDの子課題を返します。'

